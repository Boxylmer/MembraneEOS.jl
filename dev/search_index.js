var documenterSearchIndex = {"docs":
[{"location":"functions/#Exposed-Functionality","page":"Available Functions","title":"Exposed Functionality","text":"","category":"section"},{"location":"functions/","page":"Available Functions","title":"Available Functions","text":"The exposed methods do not apply to all EOS models. The assumption here, until the transition to Clapeyron.jl is made, is that only what is needed in downstream membrane packages is exposed / implemented. If you need some extra functionality for a project, please submit an issue (pull requests also welcome). ","category":"page"},{"location":"functions/","page":"Available Functions","title":"Available Functions","text":"Modules = [MembraneEOS]\nPages = [\"EOSAbstractions.jl\"]","category":"page"},{"location":"functions/#MembraneBase.pressure-Tuple{MembraneEOS.MEOSModel, Any, Any, Vararg{Any}}","page":"Available Functions","title":"MembraneBase.pressure","text":"pressure(model, v, t, [mole_fractions])\n\nGet the pressure of the state in MPa given a volume (L/mol), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.VT_chemical_potential-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.VT_chemical_potential","text":"VT_chemical_potential(model, v, t, [mole_fractions])\n\nGet the chemical potential of the state in J/mol given a volume (L/mol), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.VT_compressibility_factor-Tuple{MembraneEOS.MEOSModel, Any, Any, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.VT_compressibility_factor","text":"compressibility_factor(model, v, t, [mole_fractions])\n\nGet the compressibility factor (z) of the state given a volume (L/mol), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.VT_mass_density-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.VT_mass_density","text":"VT_mass_density(model, v, t, [mole_fractions])\n\nGet the density of the state in g/cm3 given a volume (L/mol), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.activity-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.activity","text":"activity(model, p, t, [mole_fractions])\n\nGet the chemical activity of the state given a pressure (MPa), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.chemical_potential-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.chemical_potential","text":"chemical_potential(model, p, t, [mole_fractions])\n\nGet the chemical potential of the state in J/mol given a pressure (MPa), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.chemical_potential_res-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.chemical_potential_res","text":"chemical_potential_res(model, p, t, [mole_fractions])\n\nGet the residual chemical potential of the state in J/mol given a pressure (MPa), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.compressibility_factor-Tuple{MembraneEOS.MEOSModel, Any, Any, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.compressibility_factor","text":"compressibility_factor(model, p, t, [mole_fractions])\n\nGet the compressibility factor (z) of the state given a pressure (MPa), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.density_upper_bound-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.density_upper_bound","text":"density_upper_bound(model, [mass_fractions])\n\nGet the maximum possible mass density that the system can exhibit (e.g., for Sanchez Lacombe, this is its mixed characteristic density, for cubic EOSs, it is infinite), given its composition (omitted if system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.fugacity-Tuple{MembraneEOS.MEOSModel, Any, Any, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.fugacity","text":"fugacity(model, p, t, [mole_fractions])\n\nGet a vector of fugacities for each component in the state in MPa given a pressure (MPa), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.get_kij-Tuple{MembraneEOS.MEOSModel, String, String}","page":"Available Functions","title":"MembraneEOS.get_kij","text":"get_kij(modeltype, component_1::String, component_2::String; [default_value=0.0])\n\nAttempt to look up the kij value between two components for a given EOS model type. \n\nReturns missing if the value is not in the database.\nEqual pairings (i.e., \"CO2\" and \"CO2\" will return the default_value).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.get_kij_matrix","page":"Available Functions","title":"MembraneEOS.get_kij_matrix","text":"get_kij_matrix(modeltype, components::AbstractVector{<:String})\n\nAttempt to look up all pairings in a list of components and arrange them into a corresponding KIJ matrix. \n\nWhen constructing an entire matrix at once, it is assumed you want to ignore missing values, so component pairings not in the database are assumed to interact ideally instead of being listed as missing.\n\ne.g., \n\nget_kij_matrix(PR(), [\"CO2\", \"CH4\"])\n\n> 2×2 Matrix{Union{Missing, Float64}}:\n> 0.0   0.09\n> 0.09  0.0\n\nget_kij_matrix(PR(), [\"CO2\", \"Something not in the database\"])\n\n> 2×2 Matrix{Union{Missing, Float64}}:\n> 0.0  0.0\n> 0.0  0.0\n\n\n\n\n\n","category":"function"},{"location":"functions/#MembraneEOS.mass_density-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.mass_density","text":"mass_density(model, p, t, [mole_fractions])\n\nGet the mass density of the state in g/cm3 given a pressure (MPa), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.molecular_weight-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.molecular_weight","text":"Get a vector of molecular weights for the system in g/cm3.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.volume-Tuple{MembraneEOS.MEOSModel, Any, Any, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.volume","text":"volume(model, p, t, [mole_fractions])\n\nGet the volume of the state in MPa given a pressure (MPa), temperature (K) and composition in mole fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.ρTω_activity-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.ρTω_activity","text":"ρTω_activity(model, ρ, t, [mass_fractions])\n\nGet the chemical activity of the state given a density (g/cm3), temperature (K) and composition in mass fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.ρTω_chemical_potential-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.ρTω_chemical_potential","text":"ρTω_chemical_potential(model, ρ, t, [mass_fractions])\n\nGet the chemical potential of the state in J/mol given a density (g/cm3), temperature (K) and composition in mass fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MembraneEOS.ρTω_chemical_potential_res-Tuple{MembraneEOS.MEOSModel, Vararg{Any}}","page":"Available Functions","title":"MembraneEOS.ρTω_chemical_potential_res","text":"ρTω_chemical_potential_res(model, ρ, t, [mass_fractions])\n\nGet the residual chemical potential of the state in J/mol given a density (g/cm3), temperature (K) and composition in mass fraction (can be omitted if the system is pure).\n\n\n\n\n\n","category":"method"},{"location":"kij_matrices/#KIJ-Matrices","page":"KIJ Matrices","title":"KIJ Matrices","text":"","category":"section"},{"location":"kij_matrices/","page":"KIJ Matrices","title":"KIJ Matrices","text":"To deal with (fundamental) errors in an EOS, KIJ matrices provide extra information between any given component i and j. The indices in this matrix, when provided, correspond to the indices of the components you feed into the model. \"Ideal\" interaction is typically zero. Attractive interactions are generally negative, and repulsive interactions are generally positive. This means","category":"page"},{"location":"kij_matrices/","page":"KIJ Matrices","title":"KIJ Matrices","text":"The matrix is symmetric (K[i, j] == K[j, i]).\nThe matrix diagonal values are zero.","category":"page"},{"location":"kij_matrices/","page":"KIJ Matrices","title":"KIJ Matrices","text":"An empty KIJ matrix can be created by specifying a list of components (or really just the number of components) by: ","category":"page"},{"location":"kij_matrices/","page":"KIJ Matrices","title":"KIJ Matrices","text":"MembraneEOS.initmatrix","category":"page"},{"location":"kij_matrices/#MembraneEOS.initmatrix","page":"KIJ Matrices","title":"MembraneEOS.initmatrix","text":"initmatrix(components::AbstractVector; [initial_value=0.0])\n\nCreate an ideal KIJ matrix from a list of components or just a number of elements.\n\n\n\n\n\n","category":"function"},{"location":"kij_matrices/","page":"KIJ Matrices","title":"KIJ Matrices","text":"And interactions can be manually specified.  !!!note Construction with strings     Keep in mind that if you're making your EOS purely via lookups, kij generation will happen automatically. ","category":"page"},{"location":"kij_matrices/","page":"KIJ Matrices","title":"KIJ Matrices","text":"For example, an eos with CO2","category":"page"},{"location":"misc/#Internal-Functions","page":"Internals","title":"Internal Functions","text":"","category":"section"},{"location":"misc/","page":"Internals","title":"Internals","text":"Documentation for project internals. This is useful mainly to devs or individuals wanting to take apart the package.","category":"page"},{"location":"misc/#High-level-internals","page":"Internals","title":"High level internals","text":"","category":"section"},{"location":"misc/","page":"Internals","title":"Internals","text":"MembraneEOS.ChemicalParameters","category":"page"},{"location":"misc/#MembraneEOS.ChemicalParameters","page":"Internals","title":"MembraneEOS.ChemicalParameters","text":"Define a set of parameters that describe a chemical. This method uses an optional (positional) name, and additional keyword arguments (with units) described below.\n\nnote: Note\nIt is highly reccomended to stay within the units commonly used through database lookups to avoid the risk of unit errors.\n\nParameter unit\nmolecular_weight g/mol\ncritical_temperature K\ncritical_pressure atm\nacentric factor no units\ncharacteristic_temperature K\ncharacteristic_pressure MPa\ncharacteristic_density g/cm3\n\n\n\n\n\n","category":"type"},{"location":"misc/#Low-level-internals","page":"Internals","title":"Low level internals","text":"","category":"section"},{"location":"misc/","page":"Internals","title":"Internals","text":"MembraneEOS.UnorderedChemicalPair\nMembraneEOS.create_kij_dict_from_csv!","category":"page"},{"location":"misc/#MembraneEOS.UnorderedChemicalPair","page":"Internals","title":"MembraneEOS.UnorderedChemicalPair","text":"Structs and globals\n\n\n\n\n\n","category":"type"},{"location":"misc/#MembraneEOS.create_kij_dict_from_csv!","page":"Internals","title":"MembraneEOS.create_kij_dict_from_csv!","text":"KIJ database reading functions and lookups\n\n\n\n\n\n","category":"function"},{"location":"models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/#Peng-Robinson","page":"Models","title":"Peng Robinson","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"MembraneEOS.PR","category":"page"},{"location":"models/#MembraneEOS.PR","page":"Models","title":"MembraneEOS.PR","text":"PR(chemicals::AbstractVector{<:AbstractString}, [kij=nothing])\n\nCreate a Peng Robinson EOS via a vector of chemical names and a KIJ matrix.\n\nIf kij is not specified, this will attempt to look up interactions based on the names of the chemicals. \n\n\n\n\n\nPR(chemicals::AbstractVector{<:CubicParameters}, [kij=nothing])\n\nCreate a Peng Robinson EOS via a vector of CubicParameters and a KIJ matrix.\n\nIf kij is not specified, it will be initialized with ideal interactions. \n\n\n\n\n\n","category":"function"},{"location":"models/#Sanchez-Lacombe","page":"Models","title":"Sanchez Lacombe","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"MembraneEOS.SL","category":"page"},{"location":"models/#MembraneEOS.SL","page":"Models","title":"MembraneEOS.SL","text":"SL(chemicals::AbstractVector{<:SanchezLacombeParameters}, [kij=nothing])\n\nCreate a Sanchez Lacombe EOS via a vector of SanchezLacombeParameters and a KIJ matrix.\n\nIf kij is not specified, it will be initialized with ideal interactions. \n\n\n\n\n\nSL(chemicals::AbstractVector{<:AbstractString}, [kij=nothing])\n\nCreate a Sanchez Lacombe EOS via a vector of chemical names and a KIJ matrix.\n\nIf kij is not specified, this will attempt to look up interactions based on the names of the chemicals. \n\n\n\n\n\n","category":"function"},{"location":"#MembraneEOS.jl","page":"Home","title":"MembraneEOS.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Wrapper for various equation of state (EOS) implementations to be used in the membrane package ecosystem. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"This repository will hopefully soon wrap Clapeyron.jl for EOS calculations, while providing convenience functions and data for membrane / polymer focused tasks. ","category":"page"},{"location":"#Sections","page":"Home","title":"Sections","text":"","category":"section"},{"location":"#The-Gist","page":"Home","title":"The Gist","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To get the properties of a mixture of chemicals in a given composition and conditions (state), we use an equation of state (EOS). This works by...","category":"page"},{"location":"","page":"Home","title":"Home","text":"Constructing the parameters you will be needing for the EOS. (see EOS Parameters)\n(optional) Constructing a KIJ matrix to account for deviations from the EOS predictions. (see KIJ Matrices)\nConstruction of the EOS model itself. (see Models)\nQuerying properties from the model. (see Exposed Functionality)","category":"page"},{"location":"","page":"Home","title":"Home","text":"the two ways to get parameters\nby name\nby values\nConstructing mixed models\nKIJ initialization and setting\nunit limitations","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"#Parameter-generation","page":"Home","title":"Parameter generation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To construct a model, you first construct the parameters that go into the model. using Peng Robinson as an example, which uses \"cubic parameters\"...","category":"page"},{"location":"","page":"Home","title":"Home","text":"using MembraneEOS # hide\nco2 = CubicParameters(\"CO2\")\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"They can also be constructed via values directly (see CubicParameters)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ch4 = CubicParameters(190.8, 45.79, 0.012, 16.04) # Tc, Pc, ω, MW\nnothing # hide","category":"page"},{"location":"#Model-construction","page":"Home","title":"Model construction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"These parameters can then be combined to create an EOS and extract a property from it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"components = [co2, ch4]\npr = PR(components)\npressure(pr, 22.414, 273.15, [0.5, 0.5]) # returns in mpa","category":"page"},{"location":"#Unideal-interactions","page":"Home","title":"Unideal interactions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"KIJ matrices, which encode deviations from the default EOS interactions, follow the same order that your parameters do in the input to the EOS model constructor. We can use the helper function MembraneEOS.initmatrix to create an ideal KIJ matrix for some parameters. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"kij = MembraneEOS.initmatrix(components) \nkij[1, 2] = 0.09\nkij[2, 1] = 0.09\npr = PR(components, kij)\npressure(pr, 22.414, 273.15, [0.5, 0.5])","category":"page"},{"location":"#Fast-lookups-for-common-components-in-gas-separations.","page":"Home","title":"Fast lookups for common components in gas separations.","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some default data is available for automatically looking up and using EOS parameters and kij values.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See \"TestChemicalLookup.jl\" for a bit more on how custom databases are used.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If looking up from a data base, you can skip the parameters and simply construct using strings (this will also try to initialize a KIJ matrix)","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you mix directly created parameters with tabulated ones, the KIJ search will not match any directly specified parameters. Eventually mixing these two methods of EOS model generation will throw an error to avoid ambiguity and unexpected, hard to debug behavior.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using MembraneEOS # hide\npr = PR([\"CO2\", \"CH4\"])\npressure(pr, 22.414, 273.15, [0.5, 0.5])","category":"page"},{"location":"parameters/#EOS-Parameters","page":"Parameters","title":"EOS Parameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Parameters can be specified directly or looked up. ","category":"page"},{"location":"parameters/#CubicParameters","page":"Parameters","title":"CubicParameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"MembraneEOS.CubicParameters","category":"page"},{"location":"parameters/#MembraneEOS.CubicParameters","page":"Parameters","title":"MembraneEOS.CubicParameters","text":"CubicParameters(s::String)\n\nAttempt to look up a set of cubic parameters, returns missing if not found.\n\n\n\n\n\nCubicParameters(critical_temperature, critical_pressure, acentric_factor, [molecular_weight])\n\nDirectly create some chemical's CubicParameters. Molecular weight is optional as it isn't necessary for standard functionality. \n\nParameters Units\nCritical Temperature K\nCritical Pressure atm\nAcentric Factor n/a\nMolecular Weight g/mol\n\n\n\n\n\n","category":"type"},{"location":"parameters/#SanchezLacombeParameters","page":"Parameters","title":"SanchezLacombeParameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"MembraneEOS.SanchezLacombeParameters","category":"page"},{"location":"parameters/#MembraneEOS.SanchezLacombeParameters","page":"Parameters","title":"MembraneEOS.SanchezLacombeParameters","text":"SanchezLacombeParameters(characteristic_pressure, characteristic_temperature, characteristic_density, molecular_weight)\n\nDirectly create some chemical's SanchezLacombeParameters.\n\nParameters Units\nCharacteristic Temperature K\nCharacteristic Pressure MPa\nCharacteristic Density g/cm3\nMolecular Weight g/mol\n\n\n\n\n\n","category":"type"}]
}
